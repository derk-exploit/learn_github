import requests
import re
import socket
import ssl
from datetime import datetime
from bs4 import BeautifulSoup
from urllib.parse import urljoin, urlparse
from colorama import Fore, Style, init
import time
import whois

init(autoreset=True)

class CyberSentinelPro:
    def __init__(self, target):
        self.target = target
        self.hostname = urlparse(target).hostname
        self.session = requests.Session()
        self.session.headers = {'User-Agent': 'CyberSentinel-Pro/7.0 (By deniz)'}
        
    def show_cyber_banner(self):
        print(f"""{Fore.RED}
        ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó
        ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë
        ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë
        ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó  ‚ïö‚ñà‚ñà‚ïî‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë
        ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë
        ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù
        {Fore.BLUE}‚ñ∫‚ñ∫ {Fore.WHITE}Developed by {Fore.RED}a.hacke{Fore.BLUE}‚óÑ‚óÑ
        {Fore.YELLOW}‚ñ∫‚ñ∫ {Fore.WHITE}Cyber Security Scanner v7.0 {Fore.RED}‚óÑ‚óÑ
        {Style.RESET_ALL}""")
        time.sleep(1)

    # -------------------- ŸÇÿßÿ®ŸÑ€åÿ™‚ÄåŸáÿß€å ÿßÿµŸÑ€å -------------------- #
    def port_scan(self):
        print(f"\n{Fore.CYAN}[{Fore.YELLOW}‚ö°{Fore.CYAN}] {Fore.WHITE}Cyber Port Scan Activated...")
        ports = [21, 22, 80, 443, 8080, 3306, 5432]
        open_ports = []
        
        for port in ports:
            try:
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                    s.settimeout(1.5)
                    s.connect((self.hostname, port))
                    open_ports.append(port)
                    print(f"{Fore.GREEN}‚Æû PORT {port}: {Fore.WHITE}OPEN {Fore.YELLOW}| Service: {self.get_service(port)}")
            except:
                print(f"{Fore.RED}‚Æû PORT {port}: {Fore.WHITE}CLOSED")
        print(f"\n{Fore.MAGENTA}‚ñì {Fore.WHITE}Open Ports Found: {Fore.CYAN}{len(open_ports)}")

    def get_service(self, port):
        services = {
            21: "FTP", 22: "SSH", 80: "HTTP",
            443: "HTTPS", 3306: "MySQL", 5432: "PostgreSQL",
            8080: "Proxy"
        }
        return services.get(port, "Unknown")

    def dir_brute(self):
        print(f"\n{Fore.CYAN}[{Fore.YELLOW}‚ö°{Fore.CYAN}] {Fore.WHITE}Bruteforcing Secret Directories...")
        dirs = ["admin", "wp-admin", "backup", "config", "login", "api", "dev"]
        found = []
        for d in dirs:
            url = urljoin(self.target, d)
            try:
                res = self.session.get(url, timeout=3)
                if res.status_code == 200:
                    found.append(url)
                    print(f"{Fore.GREEN}‚Æû CRITICAL FIND: {Fore.WHITE}{url}")
            except:
                continue
        print(f"\n{Fore.MAGENTA}‚ñì {Fore.WHITE}Sensitive Directories: {Fore.CYAN}{len(found)}")

    def ssl_check(self):
        print(f"\n{Fore.CYAN}[{Fore.YELLOW}üîê{Fore.CYAN}] {Fore.WHITE}Decrypting SSL/TLS Secrets...")
        try:
            ctx = ssl.create_default_context()
            with ctx.wrap_socket(socket.socket(), server_hostname=self.hostname) as s:
                s.connect((self.hostname, 443))
                cert = s.getpeercert()
                expiry_date = datetime.strptime(cert['notAfter'], '%b %d %H:%M:%S %Y %Z')
                days_left = (expiry_date - datetime.now()).days
                print(f"{Fore.WHITE}‚Æû Expiry: {Fore.GREEN if days_left > 30 else Fore.RED}{days_left} days")
                print(f"{Fore.WHITE}‚Æû Issuer: {Fore.CYAN}{cert['issuer'][0][0][1]}")
        except Exception as e:
            print(f"{Fore.RED}‚Æû SSL Scan Failed: {e}")

    
    def clickjacking_check(self):
        print(f"\n{Fore.CYAN}[{Fore.YELLOW}üõ°Ô∏è{Fore.CYAN}] {Fore.WHITE}Checking Clickjacking...")
        try:
            res = self.session.get(self.target)
            if 'X-Frame-Options' not in res.headers:
                print(f"{Fore.RED}‚Æû Vulnerable: Website can be embedded in iframe")
            else:
                print(f"{Fore.GREEN}‚Æû Protected: X-Frame-Options present")
        except Exception as e:
            print(f"{Fore.RED}‚Æû Error: {e}")

    def insecure_cookies_check(self):
        print(f"\n{Fore.CYAN}[{Fore.YELLOW}üç™{Fore.CYAN}] {Fore.WHITE}Inspecting Cookies...")
        try:
            res = self.session.get(self.target)
            insecure_flags = []
            for cookie in res.cookies:
                if not cookie.secure: insecure_flags.append(f"Secure Missing ({cookie.name})")
                if not cookie.has_nonstandard_attr('HttpOnly'): insecure_flags.append(f"HttpOnly Missing ({cookie.name})")
            if insecure_flags:
                print(f"{Fore.RED}‚Æû Issues Found:")
                for flaw in insecure_flags[:3]: print(f"  {Fore.WHITE}‚Æû {flaw}")
            else: print(f"{Fore.GREEN}‚Æû All Cookies Secure")
        except Exception as e:
            print(f"{Fore.RED}‚Æû Error: {e}")

    def ssrf_test(self):
        print(f"\n{Fore.CYAN}[{Fore.YELLOW}üåê{Fore.CYAN}] {Fore.WHITE}Testing SSRF...")
        try:
            res = self.session.post(urljoin(self.target, "/api/upload"), data={"url": "http://169.254.169.254"}, timeout=5)
            print(f"{Fore.GREEN}‚Æû SSRF Test Passed" if 'EC2' not in res.text else f"{Fore.RED}‚Æû Critical SSRF Found!")
        except:
            print(f"{Fore.YELLOW}‚Æû SSRF Check Inconclusive")

    def http_methods_check(self):
        print(f"\n{Fore.CYAN}[{Fore.YELLOW}üì°{Fore.CYAN}] {Fore.WHITE}Checking HTTP Methods...")
        try:
            res = self.session.request('OPTIONS', self.target)
            dangerous = ['PUT', 'DELETE', 'TRACE']
            allowed = res.headers.get('Allow', '').split(',')
            found = [m for m in dangerous if m in allowed]
            print(f"{Fore.RED}‚Æû Dangerous Methods: {', '.join(found)}" if found else f"{Fore.GREEN}‚Æû Methods Secure")
        except Exception as e:
            print(f"{Fore.RED}‚Æû Error: {e}")

    def email_harvesting(self):
        print(f"\n{Fore.CYAN}[{Fore.YELLOW}üìß{Fore.CYAN}] {Fore.WHITE}Harvesting Emails...")
        try:
            res = self.session.get(self.target)
            emails = re.findall(r'[\w\.-]+@[\w\.-]+', res.text)
            if emails:
                print(f"{Fore.RED}‚Æû {len(set(emails))} Emails Found:")
                for email in list(set(emails))[:3]: print(f"  {Fore.WHITE}‚Æû {email}")
            else: print(f"{Fore.GREEN}‚Æû No Emails Exposed")
        except Exception as e:
            print(f"{Fore.RED}‚Æû Error: {e}")

    def sri_check(self):
        print(f"\n{Fore.CYAN}[{Fore.YELLOW}üõ°Ô∏è{Fore.CYAN}] {Fore.WHITE}Checking Subresource Integrity...")
        try:
            res = self.session.get(self.target)
            soup = BeautifulSoup(res.text, 'html.parser')
            insecure = [script['src'] for script in soup.find_all('script', src=True) if not script.get('integrity')]
            if insecure:
                print(f"{Fore.RED}‚Æû Missing SRI in {len(insecure)} Scripts")
                for src in insecure[:2]: print(f"  {Fore.WHITE}‚Æû {src}")
            else: print(f"{Fore.GREEN}‚Æû All Scripts Secure")
        except Exception as e:
            print(f"{Fore.RED}‚Æû Error: {e}")

    def software_version_check(self):
        print(f"\n{Fore.CYAN}[{Fore.YELLOW}üíª{Fore.CYAN}] {Fore.WHITE}Detecting Software Versions...")
        try:
            res = self.session.get(self.target)
            versions = {
                'PHP': re.search(r'PHP/(\d+\.\d+\.\d+)', res.text),
                'Apache': re.search(r'Apache/(\d+\.\d+\.\d+)', res.headers.get('Server', ''))
            }
            for sw, match in versions.items():
                if match: print(f"  {Fore.WHITE}‚Æû {sw} Version: {match.group(1)}")
        except Exception as e:
            print(f"{Fore.RED}‚Æû Error: {e}")

    def open_redirect_check(self):
        print(f"\n{Fore.CYAN}[{Fore.YELLOW}‚Ü™Ô∏è{Fore.CYAN}] {Fore.WHITE}Testing Open Redirects...")
        try:
            res = self.session.get(urljoin(self.target, "/redirect?url=https://evil.com"), allow_redirects=False)
            if res.status_code in [301, 302] and 'evil.com' in res.headers.get('Location', ''):
                print(f"{Fore.RED}‚Æû Open Redirect Vulnerability!")
            else: print(f"{Fore.GREEN}‚Æû Redirects Secure")
        except Exception as e:
            print(f"{Fore.RED}‚Æû Error: {e}")

    def domain_whois(self):
        print(f"\n{Fore.CYAN}[{Fore.YELLOW}üåç{Fore.CYAN}] {Fore.WHITE}Fetching WHOIS Data...")
        try:
            domain = whois.whois(self.hostname)
            print(f"  {Fore.WHITE}‚Æû Registrar: {domain.registrar}")
            print(f"  {Fore.WHITE}‚Æû Creation Date: {domain.creation_date}")
        except Exception as e:
            print(f"{Fore.RED}‚Æû WHOIS Lookup Failed: {e}")

    def full_analysis(self):
        print(f"\n{Fore.CYAN}[{Fore.YELLOW}‚ö°{Fore.CYAN}] {Fore.WHITE}Initiating Full System Scan...")
        self.port_scan()
        self.dir_brute()
        self.ssl_check()
        self.clickjacking_check()
        self.insecure_cookies_check()
        self.ssrf_test()
        self.http_methods_check()
        self.email_harvesting()
        self.sri_check()
        self.software_version_check()
        self.open_redirect_check()
        self.domain_whois()
        print(f"\n{Fore.RED}‚ñ∫‚ñ∫ {Fore.WHITE}Scan Completed by {Fore.RED}deniz{Fore.WHITE}‚óÑ‚óÑ\n")

if __name__ == "__main__":
    print(f"{Fore.YELLOW}\n[!] Legal Notice: Authorized Use Only!")
    target = input(f"{Fore.CYAN}\n[?] Enter Target URL: {Style.RESET_ALL}").strip()
    if not target.startswith(('http://', 'https://')):
        target = f'http://{target}'
    
    scanner = CyberSentinelPro(target)
    scanner.show_cyber_banner()
    scanner.full_analysis()
